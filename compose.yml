name: 'gym-assistant'

services:
  fpm:
    build:
      context: .
      dockerfile: docker/fpm/Dockerfile
      args:
        USER: ${GA_USER:-www-data}
    container_name: ${COMPOSE_PROJECT_NAME}-fpm
    depends_on:
      db:
        condition: service_healthy
    environment:
      DOMAIN: ${GA_DOMAIN:-ga.localhost}
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - vendor:/var/www/vendor
      - app_var:/var/www/var
      - exercise_imgs:/var/www/public/img/exercise
      - program_imgs:/var/www/public/img/program
    networks:
      - backend-network

# one container - one process, all interactions through CLI-container
  cli:
    build:
      context: .
      dockerfile: docker/cli/Dockerfile
      args:
        USER: ${GA_USER:-www-data}
    container_name: ${COMPOSE_PROJECT_NAME}-cli
    depends_on:
      nginx: # for application tests
        condition: service_healthy
      test-db:
        condition: service_healthy
    environment:
      DOMAIN: ${GA_DOMAIN:-ga.localhost}
    tty: true
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./var/coverage:/var/www/var/coverage
      - vendor:/var/www/vendor # share vendor with fpm
      - app_var:/var/www/var # share cache and logs with fpm
    networks:
      - backend-network

  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME}-nginx
    depends_on:
      fpm:
        condition: service_started
    environment:
      DOMAIN: ${GA_DOMAIN:-ga.localhost}
    hostname: ${GA_DOMAIN:-ga.localhost}
    healthcheck:
      test: "curl -f http://$$DOMAIN"
      interval: 10s
    restart: unless-stopped
    tty: true
    ports:
      - "${GA_NGINX_PORT:-80}:80"
    volumes:
      - ./public:/var/www/public:ro
    configs:
      - source: nginx_config
        target: /etc/nginx/conf.d/default.conf
    networks:
      - backend-network

  db:
    image: postgres:${GA_PGSQL_VERSION:-16}-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-db
    environment:
      POSTGRES_DB: ${GA_PGSQL_DATABASE:-assistant}
      POSTGRES_USER: ${GA_PGSQL_USERNAME:-assistant}
      POSTGRES_PASSWORD: ${GA_PGSQL_PASSWORD:-assistant}
    healthcheck:
      test: [ "CMD", "pg_isready", "-d $$POSTGRES_DB" ]
      interval: 10s
    restart: unless-stopped
    tty: true
    ports:
      - "${GA_PGSQL_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend-network

  test-db:
    image: postgres:${GA_PGSQL_VERSION:-16}-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-test-db
    environment:
      POSTGRES_DB: ${GA_PGSQL_TEST_DATABASE:-test}
      POSTGRES_USER: ${GA_PGSQL_TEST_USERNAME:-test-user}
      POSTGRES_PASSWORD: ${GA_PGSQL_TEST_PASSWORD:-test-password}
    healthcheck:
      test: [ "CMD", "pg_isready", "-d $$POSTGRES_DB" ]
      interval: 10s
    restart: unless-stopped
    tty: true
    ports:
      - "${GA_PGSQL_TEST_PORT:-5433}:5432"
    volumes:
      - db_test_data:/var/lib/postgresql/data
    networks:
      - backend-network

volumes:
  vendor:
  app_var:
  db_data:
  db_test_data:
  exercise_imgs:
  program_imgs:

configs:
  nginx_config:
    file: ./docker/nginx/conf.d/default.conf

networks:
  backend-network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME}-backend-network